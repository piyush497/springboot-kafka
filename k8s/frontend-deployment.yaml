apiVersion: apps/v1
kind: Deployment
metadata:
  name: courier-frontend
  namespace: courier-system
  labels:
    app: courier-frontend
    component: frontend
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: courier-frontend
  template:
    metadata:
      labels:
        app: courier-frontend
        component: frontend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "false"
    spec:
      serviceAccountName: courier-frontend-sa
      containers:
      - name: frontend
        image: courierregistry.azurecr.io/courier-frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: REACT_APP_MAIN_API_URL
          value: "http://courier-main-service:8080/api/v1"
        - name: REACT_APP_CUSTOMER_API_URL
          value: "http://courier-customer-interface-service:8081/api/v1/customer"
        - name: REACT_APP_ENVIRONMENT
          value: "production"
        - name: REACT_APP_VERSION
          value: "1.0.0"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        securityContext:
          runAsNonRoot: true
          runAsUser: 101
          runAsGroup: 101
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
      volumes:
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "kubernetes.azure.com/scalesetpriority"
        operator: "Equal"
        value: "spot"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - courier-frontend
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: courier-frontend-service
  namespace: courier-system
  labels:
    app: courier-frontend
    component: frontend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: courier-frontend

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: courier-frontend-sa
  namespace: courier-system
  labels:
    app: courier-frontend

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: courier-frontend-netpol
  namespace: courier-system
spec:
  podSelector:
    matchLabels:
      app: courier-frontend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: courier-api-gateway
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: courier-main-service
    ports:
    - protocol: TCP
      port: 8080
  - to:
    - podSelector:
        matchLabels:
          app: courier-customer-interface
    ports:
    - protocol: TCP
      port: 8081
  - to: {}
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: {}
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
