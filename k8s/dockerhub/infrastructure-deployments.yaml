# PostgreSQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: courier-postgresql
  namespace: courier-system
  labels:
    app: courier-postgresql
    component: database
    tier: infrastructure
spec:
  replicas: 1
  selector:
    matchLabels:
      app: courier-postgresql
      tier: infrastructure
  template:
    metadata:
      labels:
        app: courier-postgresql
        component: database
        tier: infrastructure
    spec:
      containers:
      - name: postgresql
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "courier_db"
        - name: POSTGRES_USER
          value: "courier_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: courier-database-secret
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - courier_user
            - -d
            - courier_db
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - courier_user
            - -d
            - courier_db
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: courier-postgresql
  namespace: courier-system
  labels:
    app: courier-postgresql
    component: database
    tier: infrastructure
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: courier-postgresql
    tier: infrastructure

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: courier-system
  labels:
    app: courier-postgresql
    component: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# Zookeeper
apiVersion: apps/v1
kind: Deployment
metadata:
  name: courier-zookeeper
  namespace: courier-system
  labels:
    app: courier-zookeeper
    component: zookeeper
    tier: infrastructure
spec:
  replicas: 1
  selector:
    matchLabels:
      app: courier-zookeeper
      tier: infrastructure
  template:
    metadata:
      labels:
        app: courier-zookeeper
        component: zookeeper
        tier: infrastructure
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.4.0
        ports:
        - containerPort: 2181
          name: client
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: zookeeper-data
          mountPath: /var/lib/zookeeper/data
        - name: zookeeper-logs
          mountPath: /var/lib/zookeeper/log
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "nc -z localhost 2181"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "nc -z localhost 2181"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: zookeeper-data
        persistentVolumeClaim:
          claimName: zookeeper-data-pvc
      - name: zookeeper-logs
        persistentVolumeClaim:
          claimName: zookeeper-logs-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: courier-zookeeper
  namespace: courier-system
  labels:
    app: courier-zookeeper
    component: zookeeper
    tier: infrastructure
spec:
  type: ClusterIP
  ports:
  - port: 2181
    targetPort: 2181
    protocol: TCP
    name: client
  selector:
    app: courier-zookeeper
    tier: infrastructure

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: zookeeper-data-pvc
  namespace: courier-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: zookeeper-logs-pvc
  namespace: courier-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---
# Kafka
apiVersion: apps/v1
kind: Deployment
metadata:
  name: courier-kafka
  namespace: courier-system
  labels:
    app: courier-kafka
    component: kafka
    tier: infrastructure
spec:
  replicas: 1
  selector:
    matchLabels:
      app: courier-kafka
      tier: infrastructure
  template:
    metadata:
      labels:
        app: courier-kafka
        component: kafka
        tier: infrastructure
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.4.0
        ports:
        - containerPort: 9092
          name: kafka
        - containerPort: 9101
          name: jmx
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "courier-zookeeper:2181"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://courier-kafka:29092,PLAINTEXT_HOST://courier-kafka:9092"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
          value: "0"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_JMX_PORT
          value: "9101"
        - name: KAFKA_JMX_HOSTNAME
          value: "localhost"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: kafka-data
          mountPath: /var/lib/kafka/data
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "kafka-broker-api-versions --bootstrap-server localhost:9092"
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "kafka-broker-api-versions --bootstrap-server localhost:9092"
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: kafka-data
        persistentVolumeClaim:
          claimName: kafka-data-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: courier-kafka
  namespace: courier-system
  labels:
    app: courier-kafka
    component: kafka
    tier: infrastructure
spec:
  type: ClusterIP
  ports:
  - port: 9092
    targetPort: 9092
    protocol: TCP
    name: kafka
  - port: 9101
    targetPort: 9101
    protocol: TCP
    name: jmx
  selector:
    app: courier-kafka
    tier: infrastructure

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-data-pvc
  namespace: courier-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# Redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: courier-redis
  namespace: courier-system
  labels:
    app: courier-redis
    component: cache
    tier: infrastructure
spec:
  replicas: 1
  selector:
    matchLabels:
      app: courier-redis
      tier: infrastructure
  template:
    metadata:
      labels:
        app: courier-redis
        component: cache
        tier: infrastructure
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        args:
        - redis-server
        - --appendonly
        - "yes"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: courier-redis
  namespace: courier-system
  labels:
    app: courier-redis
    component: cache
    tier: infrastructure
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app: courier-redis
    tier: infrastructure

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
  namespace: courier-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
