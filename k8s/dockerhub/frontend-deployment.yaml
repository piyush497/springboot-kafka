apiVersion: apps/v1
kind: Deployment
metadata:
  name: courier-frontend
  namespace: courier-system
  labels:
    app: courier-frontend
    component: frontend
    tier: frontend
    app.kubernetes.io/name: courier-microservices
    app.kubernetes.io/component: frontend
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: courier-frontend
      tier: frontend
  template:
    metadata:
      labels:
        app: courier-frontend
        component: frontend
        tier: frontend
        app.kubernetes.io/name: courier-microservices
        app.kubernetes.io/component: frontend
    spec:
      imagePullSecrets:
      - name: dockerhub-secret
      containers:
      - name: courier-frontend
        # Replace YOUR_DOCKERHUB_USERNAME with your actual Docker Hub username
        image: YOUR_DOCKERHUB_USERNAME/courier-frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: REACT_APP_MAIN_API_URL
          valueFrom:
            configMapKeyRef:
              name: courier-config
              key: REACT_APP_MAIN_API_URL
        - name: REACT_APP_CUSTOMER_API_URL
          valueFrom:
            configMapKeyRef:
              name: courier-config
              key: REACT_APP_CUSTOMER_API_URL
        - name: REACT_APP_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: courier-config
              key: REACT_APP_ENVIRONMENT
        - name: REACT_APP_VERSION
          value: "1.0.0"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
        securityContext:
          runAsNonRoot: true
          runAsUser: 101
          runAsGroup: 101
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - courier-frontend
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: courier-frontend
  namespace: courier-system
  labels:
    app: courier-frontend
    component: frontend
    tier: frontend
    app.kubernetes.io/name: courier-microservices
    app.kubernetes.io/component: frontend
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: courier-frontend
    tier: frontend
