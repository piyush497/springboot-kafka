version: '3.8'

services:
  # Zookeeper service for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: courier-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - courier-network

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: courier-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - courier-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI for management and monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: courier-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: courier-local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - courier-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: courier-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: courier_db
      POSTGRES_USER: courier_user
      POSTGRES_PASSWORD: courier_pass
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - courier-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U courier_user -d courier_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: courier-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - courier-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka topic initialization
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ['/bin/sh', '-c']
    command: |
      "
      # Wait for Kafka to be ready
      echo 'Waiting for Kafka to be ready...'
      kafka-topics --bootstrap-server kafka:29092 --list

      echo 'Creating topics...'
      
      # Create topics for the courier system
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic incoming-parcel-orders --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic abc-transport-events --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic abc-transport-responses --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic parcel-tracking-events --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic courier-internal-events --replication-factor 1 --partitions 3
      
      echo 'Topics created successfully:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
    networks:
      - courier-network

volumes:
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  kafka-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  courier-network:
    driver: bridge
    name: courier-network
